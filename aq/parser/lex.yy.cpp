#line 2 "aq/parser/lex.yy.cpp"

#line 4 "aq/parser/lex.yy.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 142
#define YY_END_OF_BUFFER 143
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[514] =
    {   0,
       36,   36,  143,  141,  140,  140,  141,   20,   21,    7,
        5,   18,    6,   17,    8,   26,   19,   10,    9,   11,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,   24,   25,   22,  141,   23,  140,    0,
       35,    0,    0,    0,    0,   27,   29,    2,   28,   26,
        0,   13,   12,   14,  139,  139,  139,  139,  139,   40,
      139,  139,   44,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,   74,   80,  139,  139,  139,  139,  139,  139,

      139,  139,  139,  139,  139,  139,   96,    4,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  133,  139,  139,  139,  139,  139,  139,
      139,  139,   16,    0,    0,    0,    0,   35,    0,    1,
       32,   31,    0,    0,   28,    0,    0,   30,   37,   38,
        3,   39,  139,   41,   42,  139,  139,  139,  139,  139,
      139,  139,   53,  139,  139,  139,  139,  139,  139,   61,
      139,  139,  139,  139,  139,  139,   68,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,   82,  139,  139,
      139,  139,  139,   88,  139,   90,  139,  139,   15,  139,

       95,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  107,  139,  111,  139,  139,  139,  139,  139,  118,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,    0,    0,    0,    0,    0,
       35,    0,   31,    0,    0,   33,    0,   29,    0,   28,
       36,  139,   45,   46,  139,  139,  139,  139,   52,  139,
      139,  139,  139,   58,  139,   60,  139,  139,  139,  139,
      139,  139,  139,   70,   71,  139,  139,  139,  139,  139,
      139,   79,   81,  139,   84,   85,   86,  139,  139,  139,
      139,  139,   94,  139,  139,   99,  139,  139,  139,  103,

      139,  139,  139,  109,  139,  139,  113,  139,  112,  139,
      139,  139,  139,  121,  139,  139,  139,  134,  139,  139,
      139,  139,  139,  139,  139,  129,  139,  131,  132,    0,
        0,   35,    0,   32,    0,   31,   36,  139,  139,   49,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      135,  139,  139,   69,   72,  139,  139,   75,  139,  139,
      139,  139,  139,   89,   91,   92,  139,   97,   98,  139,
      139,  102,  139,  105,  139,  139,  139,  139,  139,  139,
      120,  139,  139,  139,  139,  139,  139,  125,  139,  139,
      127,  139,  130,    0,   36,  139,   48,   47,  139,   54,

      139,  139,   57,  139,   64,   62,  139,  139,  139,   73,
      139,   76,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  110,  115,  117,  114,  119,  139,  139,  139,
      139,  139,  139,  126,  128,    0,   43,   50,   55,  139,
      139,   63,  139,  139,  139,   77,  139,  139,   87,   93,
      139,  139,  104,  139,  139,  139,  138,  137,  139,  139,
      139,  136,    0,  139,   56,   59,  139,  139,  139,   78,
      139,  139,  139,  106,  139,  139,  139,  123,  139,    0,
      139,  139,   67,   66,  139,  100,  101,  139,  116,  139,
      124,    0,  139,  139,   83,  108,  139,    0,  139,   65,

      122,    0,   51,    0,    0,    0,    0,    0,    0,    0,
        0,   34,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    2,    1,    1,    1,    1,    5,    6,
        7,    8,    9,   10,   11,   12,   13,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   15,   16,   17,
       18,   19,    1,    1,   20,   21,   22,   23,   24,   25,
       26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
       36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
       46,   47,   48,    1,   49,    1,   20,   21,   22,   23,

       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
       44,   45,   50,   51,   52,    1,    1,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,

       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53
    } ;

static yyconst flex_int32_t yy_meta[54] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    2,    1,    1,    1,    1,    1,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    1,    1,    1,    2,    1,
        1,    1,    2
    } ;

static yyconst flex_int16_t yy_base[518] =
    {   0,
        0,    0,  633,  634,   52,   55,   55,  634,  634,  634,
      634,  634,   50,  618,  623,   51,  634,   48,  634,  612,
       47,   46,   52,   53,   60,   67,  592,  608,   67,  593,
        0,   86,   88,   77,   86,   59,  100,   97,  105,  105,
      606,  114,  601,  634,  634,  634,  573,  634,  142,   66,
      146,  142,  110,  620,  608,   70,  138,  634,  139,  146,
      150,  634,  634,  634,    0,  583,  589,   86,  570,  596,
      591,  577,    0,  577,  133,  590,  576,  127,  147,  574,
      573,  587,  587,  140,  577,  570,   98,  147,  575,  571,
      563,  571,  144,    0,  574,  148,  155,  571,  145,  563,

      566,  565,  558,  557,  564,  563,    0,  570,  553,  567,
      553,  565,  555,  156,  561,  156,  161,  161,  549,  548,
      173,  169,  560,  534,  175,  181,  559,  553,  549,  555,
      541,  557,  634,  209,  151,  191,  194,  213,  573,  634,
      196,  205,  212,  213,  211,  219,  561,  560,    0,    0,
        0,    0,  520,    0,    0,  530,  207,  539,  537,  549,
      531,  543,    0,  532,  184,  541,  542,  524,  538,    0,
      541,  522,  522,  520,  519,  525,    0,  523,  522,  522,
      512,  523,  526,  525,  524,  208,  514,    0,  507,  522,
      505,  519,  520,    0,  515,  500,  500,  498,    0,  506,

        0,  512,  511,  497,  494,  510,  505,  499,  498,  501,
      496,  196,  502,    0,  501,  487,  484,  494,  483,    0,
      489,  493,  485,  214,  484,  215,  482,  481,  481,  493,
      479,  471,  207,  480,  472,  245,  238,  242,  248,  254,
      258,  255,  241,  259,  494,  493,  492,  491,  490,  489,
      234,  478,    0,    0,  473,  461,  460,  474,    0,  474,
      456,  458,  455,    0,  465,    0,  457,  452,  470,  465,
      449,  453,  462,    0,    0,  450,  451,  460,  445,  444,
      241,    0,    0,  431,    0,    0,    0,  452,  454,  439,
      449,  438,    0,  437,  436,    0,  444,  447,  446,    0,

      449,  429,  446,    0,  433,  443,    0,  442,    0,  430,
      423,  437,  436,    0,  432,  438,  419,    0,  434,  415,
      421,  419,  413,  425,  426,    0,  425,    0,    0,  266,
      270,  278,  434,  433,  432,  431,  256,  420,  404,    0,
      418,  408,  416,  408,  401,  413,  403,  411,  396,  411,
        0,  383,  389,    0,    0,  404,  401,    0,  389,  403,
      385,  384,  400,    0,    0,    0,  403,    0,    0,  383,
      398,    0,  398,    0,  399,  378,  378,  392,  389,  377,
        0,  374,  392,  372,  390,  389,  375,    0,  365,  382,
        0,  367,    0,  281,  257,  371,    0,    0,  364,    0,

      363,  377,    0,  378,    0,    0,  360,  357,  369,    0,
      376,    0,  358,  374,  373,  369,  360,  362,  361,  364,
      365,  354,    0,    0,    0,  357,    0,  347,  359,  360,
      342,  357,  346,    0,    0,  274,    0,  329,    0,  354,
      337,    0,  355,  341,  334,    0,  341,  340,    0,    0,
      336,  336,    0,  333,  340,  327,    0,    0,  320,  333,
      332,    0,  279,  332,    0,    0,  323,  327,  328,    0,
      311,  316,  321,    0,  319,  316,  313,    0,  315,  285,
      317,  290,    0,    0,  303,    0,    0,  287,    0,  289,
        0,  286,  280,  248,    0,    0,  170,  292,  173,    0,

        0,  293,    0,  297,  299,  298,  301,  303,  315,  317,
      311,  331,  634,  364,   74,  366,   72
    } ;

static yyconst flex_int16_t yy_def[518] =
    {   0,
      513,    1,  513,  513,  513,  513,  514,  513,  513,  513,
      513,  513,  513,  513,  513,  513,  513,  513,  513,  513,
      515,  515,  515,  515,  515,  515,  515,  515,  515,  515,
      515,  515,  515,  515,  515,  515,  515,  515,  515,  515,
      515,  515,  515,  513,  513,  513,  513,  513,  513,  514,
      513,  514,  514,  516,  513,  513,  513,  513,  513,  513,
      513,  513,  513,  513,  515,  515,  515,  515,  515,  515,
      515,  515,  515,  515,  515,  515,  515,  515,  515,  515,
      515,  515,  515,  515,  515,  515,  515,  515,  515,  515,
      515,  515,  515,  515,  515,  515,  515,  515,  515,  515,

      515,  515,  515,  515,  515,  515,  515,  515,  515,  515,
      515,  515,  515,  515,  515,  515,  515,  515,  515,  515,
      515,  515,  515,  515,  515,  515,  515,  515,  515,  515,
      515,  515,  513,  513,  513,  514,  514,  514,  516,  513,
      513,  513,  513,  513,  513,  513,  513,  513,  515,  515,
      515,  515,  517,  515,  515,  515,  515,  515,  515,  515,
      515,  515,  515,  515,  515,  515,  515,  515,  515,  515,
      515,  515,  515,  515,  515,  515,  515,  515,  515,  515,
      515,  515,  515,  515,  515,  515,  515,  515,  515,  515,
      515,  515,  515,  515,  515,  515,  515,  515,  515,  515,

      515,  515,  515,  515,  515,  515,  515,  515,  515,  515,
      515,  515,  515,  515,  515,  515,  515,  515,  515,  515,
      515,  515,  515,  515,  515,  515,  515,  515,  515,  515,
      515,  515,  515,  515,  515,  513,  514,  514,  514,  514,
      514,  513,  513,  513,  513,  513,  513,  513,  513,  513,
      517,  515,  515,  515,  515,  515,  515,  515,  515,  515,
      515,  515,  515,  515,  515,  515,  515,  515,  515,  515,
      515,  515,  515,  515,  515,  515,  515,  515,  515,  515,
      515,  515,  515,  515,  515,  515,  515,  515,  515,  515,
      515,  515,  515,  515,  515,  515,  515,  515,  515,  515,

      515,  515,  515,  515,  515,  515,  515,  515,  515,  515,
      515,  515,  515,  515,  515,  515,  515,  515,  515,  515,
      515,  515,  515,  515,  515,  515,  515,  515,  515,  514,
      514,  514,  513,  513,  513,  513,  517,  515,  515,  515,
      515,  515,  515,  515,  515,  515,  515,  515,  515,  515,
      515,  515,  515,  515,  515,  515,  515,  515,  515,  515,
      515,  515,  515,  515,  515,  515,  515,  515,  515,  515,
      515,  515,  515,  515,  515,  515,  515,  515,  515,  515,
      515,  515,  515,  515,  515,  515,  515,  515,  515,  515,
      515,  515,  515,  514,  517,  515,  515,  515,  515,  515,

      515,  515,  515,  515,  515,  515,  515,  515,  515,  515,
      515,  515,  515,  515,  515,  515,  515,  515,  515,  515,
      515,  515,  515,  515,  515,  515,  515,  515,  515,  515,
      515,  515,  515,  515,  515,  514,  515,  515,  515,  515,
      515,  515,  515,  515,  515,  515,  515,  515,  515,  515,
      515,  515,  515,  515,  515,  515,  515,  515,  515,  515,
      515,  515,  514,  515,  515,  515,  515,  515,  515,  515,
      515,  515,  515,  515,  515,  515,  515,  515,  515,  514,
      515,  515,  515,  515,  515,  515,  515,  515,  515,  515,
      515,  514,  515,  515,  515,  515,  515,  514,  515,  515,

      515,  514,  515,  514,  514,  514,  514,  514,  514,  514,
      514,  513,    0,  513,  513,  513,  513
    } ;

static yyconst flex_int16_t yy_nxt[688] =
    {   0,
        4,    5,    6,    5,    7,    8,    9,   10,   11,   12,
       13,   14,   15,   16,    4,   17,   18,   19,   20,   21,
       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   31,   37,   38,   39,   40,
       41,   42,   31,   43,   31,   44,    4,   45,   31,   46,
       47,   48,   31,   49,   49,   49,   49,   49,   49,   51,
       54,   55,   59,   56,   60,   62,   63,   66,   52,   72,
       51,   74,   78,  251,   61,   65,   79,   67,  111,   68,
       80,  142,   69,   56,   70,   75,   85,   71,   76,   73,
       81,   77,   82,  143,   86,  112,  103,   83,   92,   93,

       87,   53,   84,   88,   94,   96,   89,   99,  151,   97,
      104,  100,   53,   98,  138,  101,  105,  106,  107,  113,
      117,  102,  108,  114,  122,  109,  110,  115,  176,  152,
      118,  123,  119,  116,  177,  120,  121,  126,  124,  127,
      130,  125,  128,   49,   49,   49,   51,  131,  134,  135,
      136,   57,  145,  134,  135,  137,   53,   59,  147,   60,
      147,  144,  146,  148,  158,  162,  178,  172,  164,   61,
      163,  165,  159,  188,  190,  208,  184,  166,  173,  191,
      179,  185,  186,  193,  167,  189,  211,  194,   53,  221,
      209,  213,  215,  219,  225,   51,  503,  212,   51,  214,

      216,  227,  501,  261,  220,  222,  238,  262,  228,  141,
      229,  134,  236,  237,  226,  239,  240,  241,  243,  242,
      245,  247,  245,  247,  145,  246,  248,  249,  244,  249,
      253,  281,  250,  304,  146,  315,  316,   53,  318,  326,
       53,  282,   51,  327,  305,  254,   51,  319,  236,  237,
      239,  331,  332,  337,  243,  330,  239,  240,   51,   53,
      239,  240,  241,  333,  244,  333,  360,  335,  334,  335,
       51,  500,  336,  331,  332,  337,  337,  361,   51,  394,
      239,  240,  241,   51,   53,   51,   65,  463,   53,   51,
       51,  395,  480,  436,   53,  502,   51,   51,  492,  498,

       53,   51,   51,   51,   53,   51,  504,   51,   65,   65,
      505,  507,   53,  506,  508,  512,   53,  509,  499,   51,
       53,   51,  497,  496,   53,   53,  495,   53,  510,  494,
      511,   53,   53,  134,  135,  136,  493,  491,   53,   53,
      490,  489,  488,   53,   53,   53,  487,   53,  486,   53,
      485,  484,  483,  482,  481,  479,  478,   53,  477,  476,
      475,   53,  474,   53,   50,   50,  139,  139,  473,  472,
      471,  470,  469,  468,  467,  466,  465,  464,  462,  461,
      460,  459,  458,  457,  456,  455,  454,  453,  452,  451,
      450,  449,  448,  447,  446,  445,  444,  443,  442,  441,

      440,  439,  438,  437,  435,  434,  433,  432,  431,  430,
      429,  428,  427,  426,  425,  424,  423,  422,  421,  420,
      419,  418,  417,  416,  415,  414,  413,  412,  411,  410,
      409,  408,  407,  406,  405,  404,  403,  402,  401,  400,
      399,  398,  397,  396,  336,  336,  334,  334,  393,  392,
      391,  390,  389,  388,  387,  386,  385,  384,  383,  382,
      381,  380,  379,  378,  377,  376,  375,  374,  373,  372,
      371,  370,  369,  368,  367,  366,  365,  364,  363,  362,
      359,  358,  357,  356,  355,  354,  353,  352,  351,  350,
      349,  348,  347,  346,  345,  344,  343,  342,  341,  340,

      339,  338,  250,  250,  248,  248,  246,  246,  329,  328,
      325,  324,  323,  322,  321,  320,  317,  314,  313,  312,
      311,  310,  309,  308,  307,  306,  303,  302,  301,  300,
      299,  298,  297,  296,  295,  294,  293,  292,  291,  290,
      289,  288,  287,  286,  285,  284,  283,  280,  279,  278,
      277,  276,  275,  274,  273,  272,  271,  270,  269,  268,
      267,  266,  265,  264,  263,  260,  259,  258,  257,  256,
      255,  252,   65,  148,  148,  140,  235,  234,  233,  232,
      231,  230,  224,  223,  218,  217,  210,  207,  206,  205,
      204,  203,  202,  201,  200,  199,  198,  197,  196,  195,

      192,  187,  183,  182,  181,  180,  175,  174,  171,  170,
      169,  168,  161,  160,  157,  156,  155,  154,  153,  150,
      149,  141,  140,  133,  132,  129,   95,   91,   90,   64,
       58,   57,  513,    3,  513,  513,  513,  513,  513,  513,
      513,  513,  513,  513,  513,  513,  513,  513,  513,  513,
      513,  513,  513,  513,  513,  513,  513,  513,  513,  513,
      513,  513,  513,  513,  513,  513,  513,  513,  513,  513,
      513,  513,  513,  513,  513,  513,  513,  513,  513,  513,
      513,  513,  513,  513,  513,  513,  513
    } ;

static yyconst flex_int16_t yy_chk[688] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    5,    5,    5,    6,    6,    6,    7,
       13,   13,   16,   13,   16,   18,   18,   21,    7,   22,
       50,   23,   24,  517,   16,  515,   24,   21,   36,   21,
       24,   56,   21,   56,   21,   23,   26,   21,   23,   22,
       25,   23,   25,   56,   26,   36,   34,   25,   29,   29,

       26,    7,   25,   26,   29,   32,   26,   33,   68,   32,
       34,   33,   50,   32,   53,   33,   34,   34,   35,   37,
       38,   33,   35,   37,   39,   35,   35,   37,   87,   68,
       38,   39,   38,   37,   87,   38,   38,   40,   39,   40,
       42,   39,   40,   49,   49,   49,   52,   42,   51,   51,
       51,   57,   59,  135,  135,   52,   53,   60,   61,   60,
       61,   57,   59,   61,   75,   78,   88,   84,   79,   60,
       78,   79,   75,   96,   97,  114,   93,   79,   84,   97,
       88,   93,   93,   99,   79,   96,  116,   99,   52,  122,
      114,  117,  118,  121,  125,  136,  499,  116,  137,  117,

      118,  126,  497,  165,  121,  122,  137,  165,  126,  141,
      126,  134,  134,  134,  125,  138,  138,  138,  142,  141,
      143,  144,  143,  144,  145,  143,  144,  146,  142,  146,
      157,  186,  146,  212,  145,  224,  224,  136,  226,  233,
      137,  186,  237,  233,  212,  157,  238,  226,  236,  236,
      239,  239,  239,  251,  243,  238,  240,  240,  240,  138,
      241,  241,  241,  242,  243,  242,  281,  244,  242,  244,
      330,  494,  244,  331,  331,  337,  395,  281,  436,  330,
      332,  332,  332,  463,  237,  394,  251,  436,  238,  480,
      492,  337,  463,  394,  239,  498,  498,  502,  480,  492,

      240,  504,  506,  505,  241,  507,  502,  508,  337,  395,
      504,  506,  330,  505,  507,  511,  331,  508,  493,  509,
      436,  510,  490,  488,  332,  463,  485,  394,  509,  482,
      510,  480,  492,  512,  512,  512,  481,  479,  498,  502,
      477,  476,  475,  504,  506,  505,  473,  507,  472,  508,
      471,  469,  468,  467,  464,  461,  460,  511,  459,  456,
      455,  509,  454,  510,  514,  514,  516,  516,  452,  451,
      448,  447,  445,  444,  443,  441,  440,  438,  433,  432,
      431,  430,  429,  428,  426,  422,  421,  420,  419,  418,
      417,  416,  415,  414,  413,  411,  409,  408,  407,  404,

      402,  401,  399,  396,  392,  390,  389,  387,  386,  385,
      384,  383,  382,  380,  379,  378,  377,  376,  375,  373,
      371,  370,  367,  363,  362,  361,  360,  359,  357,  356,
      353,  352,  350,  349,  348,  347,  346,  345,  344,  343,
      342,  341,  339,  338,  336,  335,  334,  333,  327,  325,
      324,  323,  322,  321,  320,  319,  317,  316,  315,  313,
      312,  311,  310,  308,  306,  305,  303,  302,  301,  299,
      298,  297,  295,  294,  292,  291,  290,  289,  288,  284,
      280,  279,  278,  277,  276,  273,  272,  271,  270,  269,
      268,  267,  265,  263,  262,  261,  260,  258,  257,  256,

      255,  252,  250,  249,  248,  247,  246,  245,  235,  234,
      232,  231,  230,  229,  228,  227,  225,  223,  222,  221,
      219,  218,  217,  216,  215,  213,  211,  210,  209,  208,
      207,  206,  205,  204,  203,  202,  200,  198,  197,  196,
      195,  193,  192,  191,  190,  189,  187,  185,  184,  183,
      182,  181,  180,  179,  178,  176,  175,  174,  173,  172,
      171,  169,  168,  167,  166,  164,  162,  161,  160,  159,
      158,  156,  153,  148,  147,  139,  132,  131,  130,  129,
      128,  127,  124,  123,  120,  119,  115,  113,  112,  111,
      110,  109,  108,  106,  105,  104,  103,  102,  101,  100,

       98,   95,   92,   91,   90,   89,   86,   85,   83,   82,
       81,   80,   77,   76,   74,   72,   71,   70,   69,   67,
       66,   55,   54,   47,   43,   41,   30,   28,   27,   20,
       15,   14,    3,  513,  513,  513,  513,  513,  513,  513,
      513,  513,  513,  513,  513,  513,  513,  513,  513,  513,
      513,  513,  513,  513,  513,  513,  513,  513,  513,  513,
      513,  513,  513,  513,  513,  513,  513,  513,  513,  513,
      513,  513,  513,  513,  513,  513,  513,  513,  513,  513,
      513,  513,  513,  513,  513,  513,  513
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[143] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    1, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "aq/parser/SQL92_Tok.l"
#line 2 "aq/parser/SQL92_Tok.l"

//#include "sql92_grm_tab.h"
// int wordCount = 0;
#define YY_NO_UNISTD_H

#ifdef WIN32
#include <io.h>
#else
#include <stdio.h>
#include <unistd.h>
#endif

#line 17 "aq/parser/SQL92_Tok.l"
// %option yylineno debug 
// %option reentrant
// %option nounput
#line 822 "aq/parser/lex.yy.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 155 "aq/parser/SQL92_Tok.l"


	/* COMMENT SKIPPING */
#line 1011 "aq/parser/lex.yy.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 514 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 634 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 158 "aq/parser/SQL92_Tok.l"
/* eat up one-line comments */
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 159 "aq/parser/SQL92_Tok.l"
{
					/* eat up C style nested comments */
					register int c;
					register int nNestingLevel;

					nNestingLevel = 1;
					//printf( "In-> Nesting Level = %u\n", nNestingLevel );
					for ( ; ; ) {
						while ( ( c = yyinput() ) != '*' && c != '/' && c != EOF )
							;		/* eat up text of comment */

						if ( c == '/' ) {
							while ( ( c = yyinput() ) == '/' )
								;	/* eat up '/'-s from text of comment */
							if ( c == '*' ) {
								nNestingLevel++;	/* enter in more nested level */
								//printf( "In-> Nesting Level = %u\n", nNestingLevel );
							}
						} else if ( c == '*' ) {
							while ( ( c = yyinput() ) == '*' )
								;	/* eat up '*'-s from text of comment */
							if ( c == '/' ) {
								nNestingLevel--;
								//printf( "Out<- Nesting Level = %u\n", nNestingLevel );
								if ( nNestingLevel == 0 )
									break;    /* found the nested comments outer end */
							}
						}				
						if ( c == EOF ) {
							yyerror( "EOF in comment" );
							break;
						}
					}
				}
	YY_BREAK
/* OPERATOR RECOGNITIONS */
case 3:
YY_RULE_SETUP
#line 195 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_AND ); return K_AND; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 196 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_OR ); return K_OR; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 197 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_PLUS ); return K_PLUS; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 198 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_MINUS ); return K_MINUS; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 199 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_MUL ); return K_MUL; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 200 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_DIV ); return K_DIV; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 201 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_EQ ); return K_EQ; /* K_ATTRIB ? */ }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 202 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_LT ); return K_LT; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 203 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_GT ); return K_GT; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 204 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_NEQ ); return K_NEQ; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 205 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_LEQ ); return K_LEQ; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 206 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_GEQ ); return K_GEQ; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 207 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_NOT ); return K_NOT; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 208 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_CONCAT ); return K_CONCAT; }
	YY_BREAK
/* SPECIAL CHARACTERS */
case 17:
YY_RULE_SETUP
#line 212 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_PERIOD ); return K_PERIOD; /* K_DOT; */ }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 213 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_COMMA ); return K_COMMA; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 214 "aq/parser/SQL92_Tok.l"
{ yylval = nullptr; return K_SEMICOLON; }
	YY_BREAK
/* PARENTHESIS, BRACKET, BRACE (ACCOLADE) */
/*	'(', ')'    parenthesis ( Round brackets )				*/
/*	'[', ']'    brackets ( Square brackets )				*/
/*	'{', '}'    braces ( Brace brackets, curly brackets )	*/
/*	'<', '>'	Angle brackets - NOT used					*/					
case 20:
YY_RULE_SETUP
#line 222 "aq/parser/SQL92_Tok.l"
{ yylval = nullptr; return K_LPAREN; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 223 "aq/parser/SQL92_Tok.l"
{ yylval = nullptr; return K_RPAREN; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 224 "aq/parser/SQL92_Tok.l"
{ yylval = nullptr; return K_LBRACE; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 225 "aq/parser/SQL92_Tok.l"
{ yylval = nullptr; return K_RBRACE; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 226 "aq/parser/SQL92_Tok.l"
{ yylval = nullptr; return K_LBRACKETS; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 227 "aq/parser/SQL92_Tok.l"
{ yylval = nullptr; return K_RBRACKETS; }
	YY_BREAK
/* CONSTANTS */
/* Numeric Constants - Integer */
case 26:
#line 233 "aq/parser/SQL92_Tok.l"
case 27:
YY_RULE_SETUP
#line 233 "aq/parser/SQL92_Tok.l"
{	
					/* yylval.nVal = atoi(yytext); */ 
					yylval = new tnode( K_INTEGER );
					yylval->set_int_data( atoi( yytext ) );
					return K_INTEGER; 
				}
	YY_BREAK
/* Numeric Constants - Numerci (float)  */
/* {digits}.[{digits}]["e"[+-]{digits}] */
/* [{digits}].{digits}["e"[+-]{digits}] */
/* {digits}e[+-]{digits}                */
case 28:
#line 246 "aq/parser/SQL92_Tok.l"
case 29:
#line 247 "aq/parser/SQL92_Tok.l"
case 30:
#line 248 "aq/parser/SQL92_Tok.l"
case 31:
#line 249 "aq/parser/SQL92_Tok.l"
case 32:
#line 250 "aq/parser/SQL92_Tok.l"
case 33:
YY_RULE_SETUP
#line 250 "aq/parser/SQL92_Tok.l"
{ 
											/* yylval.dVal = atof( yytext ); */
											yylval = new tnode( K_REAL );
											yylval->set_double_data( atof( yytext ) );
											return K_REAL; 
										}
	YY_BREAK
/* Date Constants - 'MM/DD/YYYY HH24:MI:SS' */
case 34:
YY_RULE_SETUP
#line 258 "aq/parser/SQL92_Tok.l"
{ 
											yylval = new tnode( K_DATE_VALUE );
											yylval->set_string_data( yytext );
											return K_DATE_VALUE; 
										}
	YY_BREAK
/* String Constants */
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 265 "aq/parser/SQL92_Tok.l"
{ 
											/* yylval.pStr = yytext */; 
											yylval = new tnode( K_STRING );
											/* Cut off the start and end ' char ! */
											yytext[ strlen( yytext ) - 1 ] = '\0';
											yylval->set_string_data( yytext + 1 );
											return K_STRING; 
										}
	YY_BREAK
/* KEY_WORDS */
case 36:
YY_RULE_SETUP
#line 278 "aq/parser/SQL92_Tok.l"
{
				 /* yylval.pStr = yytext */
				 yylval = new tnode( K_FUNC );
				 yylval->set_string_data( yytext );
				 return K_FUNC;
				}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 285 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_ABS ); return K_ABS; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 286 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_ALL ); return K_ALL; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 287 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_ANY ); return K_ANY; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 288 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_AS ); return K_AS; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 289 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_ASC ); return K_ASC; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 290 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_AVG ); return K_AVG; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 291 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_BETWEEN ); return K_BETWEEN; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 292 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_BY ); return K_BY; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 293 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_CASE ); return K_CASE; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 294 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_CAST ); return K_CAST; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 295 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_CREATE ); return K_CREATE; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 296 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_COMMIT ); return K_COMMIT; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 297 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_COUNT ); return K_COUNT; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 298 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_CURRENT ); return K_CURRENT; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 299 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_CURRENT_DATE ); return K_CURRENT_DATE; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 300 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_DATE ); return K_DATE; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 301 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_DAY ); return K_DAY; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 302 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_DECODE ); return K_DECODE; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 303 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_DEFAULT ); return K_DEFAULT; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 304 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_DEFERRED ); return K_DEFERRED; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 305 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_DELETE ); return K_DELETE; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 306 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_DESC ); return K_DESC; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 307 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_DISTINCT ); return K_DISTINCT; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 308 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_ELSE ); return K_ELSE; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 309 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_END ); return K_END; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 310 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_EXISTS ); return K_EXISTS; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 311 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_EXTRACT ); return K_EXTRACT; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 312 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_ESCAPE ); return K_ESCAPE; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 313 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_FIRST_VALUE ); return K_FIRST_VALUE; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 314 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_IMMEDIATE ); return K_IMMEDIATE; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 315 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_FOLLOWING ); return K_FOLLOWING; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 316 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_FOR ); return K_FOR; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 317 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_FRAME ); return K_FRAME; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 318 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_FROM ); return K_FROM; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 319 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_FULL ); return K_FULL; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 320 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_GROUP ); return K_GROUP; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 321 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_HAVING ); return K_HAVING; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 322 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_IN ); return K_IN; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 323 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_INNER ); return K_INNER; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 324 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_INSERT ); return K_INSERT; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 325 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_INTEGER_TYPE ); return K_INTEGER_TYPE; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 326 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_INTERVAL ); return K_INTERVAL; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 327 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_INTO ); return K_INTO; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 328 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_IS ); return K_IS; }    
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 329 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_JOIN ); return K_JOIN; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 330 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_LAG ); return K_LAG; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 331 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_LAST_VALUE ); return K_LAST_VALUE; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 332 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_LEAD ); return K_LEAD; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 333 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_LEFT ); return K_LEFT; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 334 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_LIKE ); return K_LIKE; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 335 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_MATCHED ); return K_MATCHED; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 336 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_MAX ); return K_MAX; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 337 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_MERGE ); return K_MERGE; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 338 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_MIN ); return K_MIN; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 339 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_SEL_MINUS ); return K_SEL_MINUS; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 340 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_MONTH ); return K_MONTH; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 341 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_NATURAL ); return K_NATURAL; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 342 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_NULL ); return K_NULL; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 343 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_NVL ); return K_NVL; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 344 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_ON ); return K_ON; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 345 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_ORDER ); return K_ORDER; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 346 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_OUTER ); return K_OUTER; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 347 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_OVER ); return K_OVER; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 348 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_PARTITION ); return K_PARTITION; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 349 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_PRECEDING ); return K_PRECEDING; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 350 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_RANGE ); return K_RANGE; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 351 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_REAL_TYPE ); return K_REAL_TYPE; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 352 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_REPLACE ); return K_REPLACE; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 353 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_RIGHT ); return K_RIGHT; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 354 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_ROLLBACK ); return K_ROLLBACK; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 355 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_ROW ); return K_ROW; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 356 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_ROW_NUMBER ); return K_ROW_NUMBER; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 357 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_ROWS ); return K_ROWS; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 358 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_SELECT ); return K_SELECT; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 359 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_SET ); return K_SET; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 360 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_SQRT ); return K_SQRT; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 361 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_SOME ); return K_SOME; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 362 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_SUBSTRING ); return K_SUBSTRING; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 363 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_SOURCE ); return K_SOURCE; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 364 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_SUBSTRING ); return K_SUBSTRING; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 365 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_STRING_TYPE ); return K_STRING_TYPE; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 366 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_SUM ); return K_SUM; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 367 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_TARGET ); return K_TARGET; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 368 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_TABLE ); return K_TABLE; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 369 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_THEN ); return K_THEN; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 370 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_TRANSACTION ); return K_TRANSACTION; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 371 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_TRUNCATE ); return K_TRUNCATE; }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 372 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_UNBOUNDED ); return K_UNBOUNDED; }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 373 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_UNION ); return K_UNION; }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 374 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_UPDATE ); return K_UPDATE; }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 375 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_USING ); return K_USING; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 376 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_VALUES ); return K_VALUES; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 377 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_WHEN ); return K_WHEN; }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 378 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_WHERE ); return K_WHERE; }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 379 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_WORK ); return K_WORK; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 380 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_YEAR ); return K_YEAR; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 381 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_TO ); return K_TO; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 383 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_TRUE ); return K_TRUE; }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 384 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_FALSE ); return K_FALSE; }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 385 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_UNKNOWN ); return K_UNKNOWN; }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 387 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_TO_DATE ); return K_TO_DATE; }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 388 "aq/parser/SQL92_Tok.l"
{ yylval = new tnode( K_TO_CHAR ); return K_TO_CHAR; }
	YY_BREAK
/* IDENTIFIERS - are case insensitive */
case 139:
YY_RULE_SETUP
#line 392 "aq/parser/SQL92_Tok.l"
{ 
							/* yylval.pStr = yytext */; 
							yylval = new tnode( K_IDENT );
							yylval->set_string_data( yytext );
							return K_IDENT; 
						}
	YY_BREAK
/* !!!!!!!! */
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
#line 403 "aq/parser/SQL92_Tok.l"
{ } /* Eat White Spaces ! {ws_no_newline} -> { return *yytext; } */
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 405 "aq/parser/SQL92_Tok.l"
{	/* Catch All Rule */
							char szBuf[ 100 ];
							sprintf( szBuf, "Unsupported character <%c> (0x%x) encountered at line number: %d\n", *yytext, (int)(unsigned char)*yytext, yylineno );
							yyerror( szBuf ); 
							yyterminate();
						} 
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 411 "aq/parser/SQL92_Tok.l"
ECHO;
	YY_BREAK
#line 1886 "aq/parser/lex.yy.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 514 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 514 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 513);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 411 "aq/parser/SQL92_Tok.l"




